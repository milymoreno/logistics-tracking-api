# Docker Compose for Tracking System Infrastructure

services:
  # HashiCorp Vault for secrets management
  vault:
    image: hashicorp/vault:1.15
    container_name: tracking-vault
    ports:
      - "8200:8200"
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: "dev-token-123"
      VAULT_DEV_LISTEN_ADDRESS: "0.0.0.0:8200"
    cap_add:
      - IPC_LOCK
    # volumes:
    #   - ./vault/init.sh:/vault/init.sh   # <--- Comentado para evitar error si no existe
    command: ["vault", "server", "-dev"]
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: tracking-postgres
    ports:
      - "55432:5432"
    environment:
      POSTGRES_DB: tracking_db
      POSTGRES_USER: tracking_user
      POSTGRES_PASSWORD: tracking_pass
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tracking_user -d tracking_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL Database for Auth Service
  auth-postgres:
    image: postgres:15-alpine
    container_name: tracking-auth-postgres
    ports:
      - "55433:5432"  # Usa un puerto diferente al de la otra base
    environment:
      POSTGRES_DB: auth_db
      POSTGRES_USER: auth_user
      POSTGRES_PASSWORD: auth_pass
    volumes:
      - auth_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U auth_user -d auth_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and idempotency
  redis:
    image: redis:7-alpine
    container_name: tracking-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Auth Service (Node.js)
  auth-service:
    build:
      context: ../services/auth-service
      dockerfile: Dockerfile
    container_name: tracking-auth
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      VAULT_ENDPOINT: http://vault:8200
      VAULT_TOKEN: dev-token-123
      VAULT_SECRET_PATH: secret/jwt-keys
      DB_HOST: auth-postgres
      DB_PORT: 5432
      DB_NAME: auth_db
      DB_USER: auth_user
      DB_PASSWORD: auth_pass
    depends_on:
      vault:
        condition: service_healthy
      auth-postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Core Service (Quarkus)
  core-service:
    build:
      context: ../services/core-service
      dockerfile: Dockerfile
    container_name: tracking-core
    ports:
      - "8080:8080"
    environment:
      QUARKUS_PROFILE: docker
      QUARKUS_DATASOURCE_REACTIVE_URL: postgresql://postgres:5432/tracking_db
      QUARKUS_DATASOURCE_USERNAME: tracking_user
      QUARKUS_DATASOURCE_PASSWORD: tracking_pass
      QUARKUS_REDIS_HOSTS: redis://redis:6379
      MP_JWT_VERIFY_PUBLICKEY_LOCATION: http://auth-service:3000/.well-known/jwks.json
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/q/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway (Nginx)
  api-gateway:
    image: nginx:alpine
    container_name: tracking-gateway
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - auth-service
      - core-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  redis_data:
  auth_postgres_data:

networks:
  default:
    name: tracking-network